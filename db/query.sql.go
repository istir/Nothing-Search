// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
  name, path, date_modified, date_created
) VALUES (
  ?,
  ?,
  ?,
  ?
) ON CONFLICT(path) DO UPDATE SET
  name = excluded.name,
  date_modified = excluded.date_modified,
  date_created = excluded.date_created
RETURNING id, name, path, thumbnail_exists, date_modified, date_created
`

type CreateFileParams struct {
	Name         interface{}
	Path         interface{}
	DateModified interface{}
	DateCreated  interface{}
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.Name,
		arg.Path,
		arg.DateModified,
		arg.DateCreated,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.ThumbnailExists,
		&i.DateModified,
		&i.DateCreated,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
SELECT id, name, path, thumbnail_exists, date_modified, date_created FROM files WHERE path = ? LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, path interface{}) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, path)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.ThumbnailExists,
		&i.DateModified,
		&i.DateCreated,
	)
	return i, err
}
